FROM nvidia/cuda:11.6.0-devel-ubuntu20.04

MAINTAINER Christian Velten <cv2415@columbia.edu>
# Adapted & fixed from floydhub/dl-docker

# Update and install dependencies
RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y \
		dirmngr \
		gnupg \
		apt-transport-https \
		ca-certificates \
		software-properties-common \
		tzdata \
		&& \
	add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
	add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/" && \
	apt update && \
	apt dist-upgrade -y && \
	apt install -y \
		bc \
		build-essential \
		cmake \
		curl \
		ed \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libopenjp2-7 \
		libpng-dev \
		libssl-dev \
		libtiff-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python-dev \
		unzip \
		sudo \
		vim \
		wget \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libjpeg-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libjasper-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		python-dev \
		python-tk \
		python-numpy \
		python3-dev \
		python3-tk \
		python3-numpy \
		python3-scipy \
		python3-nose \
		python3-h5py \
		python3-skimage \
		python3-matplotlib \
		python3-pandas \
		python3-sklearn \
		python3-sympy \
		python3-pip \
		ant \
		default-jdk \
		doxygen \
		luarocks \
		r-base \
		r-base-dev \
		&& \
	apt clean && \
	apt autoremove && \
	rm -rf /var/lib/apt/lists/* && \
	update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Update PIP, add SNI support to Python, install additional packages
RUN pip --no-cache-dir install --upgrade pip && \
	pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1 \
		&& \
	pip --no-cache-dir install --upgrade \
		ipython \
		pygments>=2.4.1 \
		&& \
	pip --no-cache-dir install \
		Cython \
		ipykernel \
		jupyter \
		path.py \
		Pillow \
		six \
		sphinx \
		wheel \
		zmq \
		h5py>=2.7.0 \
        lifelines>=0.9.4 \
        logger>=1.4 \
        numpy>=1.9.0 \
        matplotlib>=2.0.0 \
		rpy2>=2.8.3 \
		&& \
	python -m ipykernel.kernelspec

# Install R Pakcages
RUN \
	echo "XRPython\n\
		randomForestSRC" > rpacks.txt && \
	R -e 'install.packages(sub("(.+)\\\\n","\\1", scan("rpacks.txt", "character")), repos="http://cran.wustl.edu")' && \
	rm rpacks.txt

# Install TensorFlow
RUN pip --no-cache-dir install --upgrade tensorflow tensorboard-logger

# Install Caffe & OpenCV
RUN apt update && apt install -y \
		# caffe-tools-cuda caffe-cuda \
		libopencv-dev \
		python3-opencv \
		&& \
	apt autoremove && \
	apt clean && \
	rm -rf /var/lib/apt/lists/*

# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN pip --no-cache-dir install git+https://github.com/Theano/Theano.git#egg=Theano && \
	\
	echo "[global]\ndevice=cuda\nfloatX=float32\noptimizer_including=cudnn\nmode=FAST_RUN \
		\n[dnn]\ninclude_path=/usr/local/cuda/include\nlibrary_path=/usr/local/cuda/lib64 \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \
	> /root/.theanorc \
	&& \
	cd / && git clone https://github.com/Theano/libgpuarray.git && \
	cd libgpuarray && mkdir build && cd build && \
	cmake .. -DCMAKE_BUILD_TYPE=Release && \
	make -j20 && make install && \
	cd .. && \
	python setup.py build && \
	python setup.py install && \
	ldconfig && \
	# Install Keras
	pip --no-cache-dir install keras && \
	# Install Lasagne
	pip --no-cache-dir install https://github.com/Lasagne/Lasagne/archive/master.zip && \
	# Install Torch
	pip --no-cache-dir install torch==1.10.1+cu113 torchvision==0.11.2+cu113 torchaudio==0.10.1+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html


# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Finish configuration
RUN cd /usr/lib && for lib in /usr/local/cuda/compat/*.so; do ln -s $lib; done

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

WORKDIR "/root"
CMD ["/bin/bash"]
